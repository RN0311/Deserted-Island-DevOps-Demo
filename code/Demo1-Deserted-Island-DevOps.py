# -*- coding: utf-8 -*-
"""Demo1 - Deserted-Island-DevOps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BpyF7IgPELslcP87jufiPOKokXFIPh6W

# Import Modules
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from sklearn.ensemble import RandomForestClassifier
from sklearn.calibration import CalibratedClassifierCV
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV
import pandas as pd
import numpy as np
import json
import glob
import operator
from sklearn.utils import shuffle
import warnings
warnings.filterwarnings('ignore')
from matplotlib import rcParams
import seaborn as sns
from sklearn.model_selection import GridSearchCV
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.ensemble import RandomForestClassifier
from sklearn.calibration import CalibratedClassifierCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import f1_score, recall_score, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

"""# Import Dataset"""

dataset = pd.read_excel("FlightDataset.xlsx")
dataset.head()

"""# Preprocessing"""

dataset.isnull().sum()
dataset.dropna(inplace = True)

dataset["Airline"].value_counts()

dataset = dataset[dataset["Airline"] != 'Trujet']
dataset = dataset[dataset["Airline"] != 'Vistara Premium economy']
dataset = dataset[dataset["Airline"] != 'Jet Airways Business']
dataset = dataset[dataset["Airline"] != 'Multiple carriers Premium economy']
dataset = dataset[dataset["Airline"] != 'GoAir']

dataset.info()

dataset["Journey-Date"] = pd.to_datetime(dataset.Date_of_Journey, format="%d/%m/%Y").dt.day
dataset["Journey-Month"] = pd.to_datetime(dataset.Date_of_Journey, format = "%d/%m/%Y").dt.month

dataset["Departure-Hour"] = pd.to_datetime(dataset.Dep_Time).dt.hour
dataset["Departure-Minutes"] = pd.to_datetime(dataset.Dep_Time).dt.minute

dataset["Arrival-Hour"] = pd.to_datetime(dataset.Arrival_Time).dt.hour
dataset["Arrival-Minutes"] = pd.to_datetime(dataset.Arrival_Time).dt.minute

journey_length = list(dataset["Duration"])

for i in range(len(journey_length)):
    if len(journey_length[i].split()) != 2:
        if "h" in journey_length[i]: journey_length[i] = journey_length[i].strip() + " 0m"
        else: journey_length[i] = "0h " + journey_length[i]

dh, dm = [], []
for i in range(len(journey_length)):
    dh.append(int(journey_length[i].split(sep = "h")[0]))
    dm.append(int(journey_length[i].split(sep = "m")[0].split()[-1]))

dataset["Duration-Hour"], dataset["Duration-Minutes"] = dh, dm

#dataset = dataset.drop(["Additional_Info", "Arrival_Time", "Dep_Time", "Duration", "Date_of_Journey", "Route"], axis = 1)

dataset.replace({"non-stop": 0, "1 stop": 1, "2 stops": 2, "3 stops": 3, "4 stops": 4}, inplace = True)

dataset.tail()

"""# Exploratory Data Analysis"""

import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as plt
from matplotlib import rcParams
import numpy as np
sns.set_style("darkgrid")

sns.set(font_scale = 1.5)
rcParams['figure.figsize'] = 15,12
sns.set_style("darkgrid")
colors = ["g", "o"]

ax = sns.boxenplot(x = 'Airline', y = 'Price', hue="Airline", data=dataset, dodge =False, palette="Greens")
ax.get_legend().set_visible(False)

import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as plt
from matplotlib import rcParams
import numpy as np
sns.set_style("darkgrid")

sns.set(font_scale = 1.5)
rcParams['figure.figsize'] = 15,12
sns.set_style("darkgrid")
colors = ["g", "o"]

ax = sns.boxenplot(x = 'Source', y = 'Price', hue="Source", data=dataset, dodge =False)
ax.get_legend().set_visible(False)

import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as plt
from matplotlib import rcParams
import numpy as np
sns.set_style("darkgrid")

sns.set(font_scale = 1.5)
rcParams['figure.figsize'] = 15,12
sns.set_style("darkgrid")
colors = ["g", "o"]

ax = sns.boxenplot(x = 'Destination', y = 'Price', hue="Destination", data=dataset, dodge =False)
ax.get_legend().set_visible(False)

Airline = pd.get_dummies(dataset[["Airline"]], drop_first= True)
Source = pd.get_dummies(dataset[["Source"]], drop_first= True)
Destination = pd.get_dummies(dataset[["Destination"]], drop_first= True)

dataset = pd.concat([dataset, Airline, Source, Destination], axis = 1)

dataset = dataset.drop(["Additional_Info", "Arrival_Time", "Dep_Time", "Duration", "Date_of_Journey", "Route", "Airline", "Source", "Destination"], axis = 1)

labels = np.array(dataset['Price'])
features= dataset.drop('Price', axis = 1)

feature_list = list(features.columns)
features = np.array(features)

# Split the data into training and testing sets
train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.25, random_state = 42)

print('Training Features Shape:', train_features.shape)
print('Training Labels Shape:', train_labels.shape)
print('Testing Features Shape:', test_features.shape)
print('Testing Labels Shape:', test_labels.shape)

#Random Forest Classifier

rf = RandomForestClassifier(n_estimators = 100, random_state = 42)
rf.fit(train_features, train_labels)


# Use the forest's predict method on the test data
predictions = rf.predict(test_features)
# Calculate the absolute errors
errors = abs(predictions - test_labels)
# Print out the mean absolute error (mae)
print('\n\nMean Absolute Error:', round(np.mean(errors), 2))


# Calculating Accuracy 
print("\n\nAccuracy Score:",accuracy_score(test_labels, predictions))


# Calculating Recall 
print("\n\nRecall Score:",recall_score(test_labels, predictions, average='macro'))


# Calculating F1 Score 
print("\n\nF1 Score:",f1_score(test_labels, predictions, average='macro'))

#Randomized Search CV

# Number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 50, stop = 120, num = 12)]
# Number of features to consider at every split
max_features = ['auto']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(5, 10, num = 6)]
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 5]

# Create the random grid

random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

# Random search of parameters, using 5 fold cross validation, 
# search across 100 different combinations
rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)

rf_random.fit(train_features,train_labels)

rf_random.best_params_

prediction = rf_random.predict(test_features)

"""# Evaluation Metrics"""

print("Accuracy Score:",accuracy_score(test_labels, predictions))

